@page "/"
@using Lib.Entities

<h3>Writing Experience</h3>


@if (loadingModel)
{
    <p>loading model, this can take a while...</p>
}
else
{
    <div>
        <InputFile OnChange="HydrateModelWithCustomTxt" />
    </div>


    <InputBoxComponent @bind-InputText=inputText />

    <KeyboardComponent WordPredictions=GetNextPredictions() OnWordSelected=OnOptionClick />

}

<ModelSelectionComponent OnNewModelStartLoading=OnNewModelStartsLoading OnNewModelLoaded=OnNewModelLoaded />


@code {
    private string inputText = "";
    private bool loadingModel = false;

    private MarkovEnsemble model = new MarkovEnsemble();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        model.Hydrate("One sentence. Is then proceeded by another. This is some text that will get to hydrate the initial model, hi");
    }


    //private void OnOptionClicka(string option) { }
    private void OnOptionClick(Prediction option)
    {
        this.inputText += " " + option.Word;
        StateHasChanged();
    }

    private IEnumerable<Prediction> GetNextPredictions()
    {
        var data = model.PredictNextOptions(inputText);
        var sorted = data.ToList().OrderByDescending(pred => pred.Score);

        return sorted.Take(20);
    }

    private async Task HydrateModelWithCustomTxt(InputFileChangeEventArgs evt)
    {
        var fileName = evt.File.Name;

        loadingModel = true;
        var stream = evt.File.OpenReadStream(maxAllowedSize: 1000000000);
        var byteBuffer = new byte[evt.File.Size];
        var byteMemory = new Memory<byte>(byteBuffer);
        await stream.ReadAsync(byteMemory);

        var fileData = System.Text.Encoding.UTF8.GetString(byteBuffer);

        model.Clear();
        model.Hydrate(fileData);

        loadingModel = false;
    }

    private void OnNewModelStartsLoading()
    {
        loadingModel = true;
        StateHasChanged();
    }

    private void OnNewModelLoaded(MarkovEnsemble model)
    {
        this.model = model;
        loadingModel = false;
        StateHasChanged();
    }
}
